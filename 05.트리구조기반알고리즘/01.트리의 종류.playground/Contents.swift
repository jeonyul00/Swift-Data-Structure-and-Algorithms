import UIKit

/*
 검색, 삽입, 삭제 등의 작업을 신속하게 처리 할 수 있다.
 
 이진 트리
 이진 검색 트리
 레드 블랙 트리
 B트리
 스플레이 트리
 
 루트: 트리의 최상위 노드
 노드: 자식 노드와 부모 노드에 대한 참조 데이터
 모서리: 부모 노드와 자식 노드의 연결선
 부모: 다른 노드와 연결돼 있으면서, 계층 구조상, 특정 노드의 바로 위에 있는 노드
 자식: 다른 노드와 연결돼 있으면서, 계층 구조 상 특정 노드의 바로 아래에 있는 노드
 형제: 동일한 무모 노드에서 나온 노드
 잎: 더 이상의 노드를 지니지 않은 자식 노드
 서브트리: 특정 노드의 모든 자손
 노드의 높이: 하나의 노드에서 가장 멀리 떨어져 있는 잎사귀 노드에 이르는 모서리 수
 트리의 높이: 루트 노드에서 잰 높이
 깊이: 루트와 노드를 연결하는 모서리의 수
 레벨: 어떤 노드의 레벨이란 깊이 + 1  -> 루트라면 깊이가 0이니까 +1해서 1
 트리 여정: 트리의 모든 노드를 한 번씩 다녀오는 과정
 */


// 간단한 설명 ---------------------------------------------------
/*
 이진 트리
 가장 간단한 트리 구조로, 각 노드가 최대 두 개의 노드만을 지닐 수 있는 트리 구조
 이진 트리에는 포화이진트리, 완전이진트리 등이 있다.
 */

/*
 이진 검색 트리
 왼쪽 자식 노드는 나보다 작고, 오른쪽 자식은 나보다 크다는 특징이 있다.
 각 노드는 최대 두 개의 자식 요소만을 지닐 수 있다.
 */

/*
 B 트리
 이진 검색 트리와 유사하지만, 각 노드마다 두 개 이상의 자식 노드를 지닐 수 있다는 차이가 있다.
 데이터 베이스 시스템과 보조 파일 저장장치에서 보편적으로 활용되는 데이터 구조이다.
 */

/*
 스플레이 트리
 이진 검색 트리의 특수한 형태로서, 최근에 접근한 노드가 트리의 상위로 이동한다는 특징을 지닌다.
 이러한 특성은 노드에 대한 접근이 매우 빈번한 상태에서 가장 최근에 방문했던 노드만을 골라낼 수 있어서 해당 노드에 대한 검색 시간을 획기적으로 줄여준다.
 이를 위해, 스플레이 트리는 노드에 접근할 때마다 스스로의 구조를 변형한다.
 가장 최근에 방문했던 노드를 가장 신속하게 접근하기 위해 스스호의 데이터 구조를 최적화하는 데이터 구조
 
 */

/*
 레드 블랙 트리
 이진 검색 트리에서 만약 값이 루트보다 작거나 큰 값만 들어올 경우 -> 불균형한 이진 탐색 트리 -> 검색 효율 저하
 이를 보안해주는 것이 레드 블랙 트리!
 1. 트리의 모든 노드는 검정색 아니면 빨간색
 2. 모든 nil잎은 검정색이다.
 3. 모든 잎 노드는 검정색
 4. 빨간색의 노드 자식들은 모두 검정색이지만, 검정색 노드 자식들은 어느 색이든 상관없다.
 5. 루트 노드에서 모든 잎 노드 사이에 있는 검정색 노드의 수는 모두 동일하다.
 이 알고리즘은 데이터 검색, 삽입, 삭제 등의 작업에 있어 최악의 성능을 나타낸다. -> 최악의 시나리오를 검토할 수 있다.
 */

/*
 그래프
 그래프는 순환할 수 있다는 차이점이 있다.
 */

